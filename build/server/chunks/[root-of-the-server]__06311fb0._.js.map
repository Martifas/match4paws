{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/auth0.ts"],"sourcesContent":["import { Auth0Client } from '@auth0/nextjs-auth0/server';\n\nexport const auth0 = new Auth0Client({\n  domain: process.env.AUTH0_DOMAIN,\n  clientId: process.env.AUTH0_CLIENT_ID,\n  clientSecret: process.env.AUTH0_CLIENT_SECRET,\n  secret: process.env.AUTH0_SECRET,\n  appBaseUrl: process.env.APP_BASE_URL,\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEO,MAAM,QAAQ,IAAI,wKAAA,CAAA,cAAW,CAAC;IACnC,QAAQ,QAAQ,GAAG,CAAC,YAAY;IAChC,UAAU,QAAQ,GAAG,CAAC,eAAe;IACrC,cAAc,QAAQ,GAAG,CAAC,mBAAmB;IAC7C,QAAQ,QAAQ,GAAG,CAAC,YAAY;IAChC,YAAY,QAAQ,GAAG,CAAC,YAAY;AACtC","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/db.ts"],"sourcesContent":["import \"dotenv/config\";\nimport { Kysely, PostgresDialect, CamelCasePlugin } from \"kysely\";\nimport { Pool } from \"pg\";\nimport { DB } from \"@/database/types\";\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nconst dialect = new PostgresDialect({ pool });\n\nexport const db = new Kysely<DB>({\n  dialect,\n  plugins: [new CamelCasePlugin()],\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;AAGA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAEA,MAAM,UAAU,IAAI,qLAAA,CAAA,kBAAe,CAAC;IAAE;AAAK;AAEpC,MAAM,KAAK,IAAI,iJAAA,CAAA,SAAM,CAAK;IAC/B;IACA,SAAS;QAAC,IAAI,6LAAA,CAAA,kBAAe;KAAG;AAClC","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/queries/users.ts"],"sourcesContent":["import { db } from '@/lib/db';\nimport { UpdateOnboardingRequest } from '@/lib/types/onboarding';\n\nexport type User = {\n  id: string;\n  auth0Id: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n  userType?: string;\n  onboardingCompleted: boolean;\n  createdAt: Date;\n  lastLoginAt?: Date;\n};\n\nexport async function getUserByAuth0Id(\n  auth0Id: string\n): Promise<{ id: string } | null> {\n  return (\n    (await db\n      .selectFrom('users')\n      .select(['id'])\n      .where('auth0Id', '=', auth0Id)\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  return (\n    (await db\n      .selectFrom('users')\n      .selectAll()\n      .where('id', '=', id)\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function createUser(auth0Id: string): Promise<void> {\n  await db\n    .insertInto('users')\n    .values({ auth0Id })\n    .onConflict(oc => oc.column('auth0Id').doNothing())\n    .execute();\n}\n\nexport async function updateLastLogin(auth0Id: string): Promise<void> {\n  await db\n    .updateTable('users')\n    .set({ lastLoginAt: new Date() })\n    .where('auth0Id', '=', auth0Id)\n    .execute();\n}\n\nexport async function getUserOnboardingStatus(\n  auth0Id: string\n): Promise<boolean> {\n  const result = await db\n    .selectFrom('users')\n    .select(['onboardingCompleted'])\n    .where('auth0Id', '=', auth0Id)\n    .executeTakeFirst();\n\n  return result?.onboardingCompleted ?? false;\n}\n\nexport async function updateUserOnboarding(\n  data: UpdateOnboardingRequest\n): Promise<void> {\n  const { userId, ...updateData } = data;\n\n  await db\n    .updateTable('users')\n    .set({\n      onboardingCompleted: true,\n      onboardingCompletedAt: new Date(),\n      ...updateData,\n\n      preferredAnimalTypes: updateData.preferredAnimalTypes\n        ? JSON.stringify(updateData.preferredAnimalTypes)\n        : undefined,\n    })\n    .where('auth0Id', '=', userId)\n    .execute();\n}\n\nexport async function updateUserProfile(\n  userId: string,\n  updates: Partial<Pick<User, 'name' | 'email' | 'phone'>>\n): Promise<void> {\n  await db.updateTable('users').set(updates).where('id', '=', userId).execute();\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;AAeO,eAAe,iBACpB,OAAe;IAEf,OACE,AAAC,MAAM,kHAAA,CAAA,KAAE,CACN,UAAU,CAAC,SACX,MAAM,CAAC;QAAC;KAAK,EACb,KAAK,CAAC,WAAW,KAAK,SACtB,gBAAgB,MAAO;AAE9B;AAEO,eAAe,YAAY,EAAU;IAC1C,OACE,AAAC,MAAM,kHAAA,CAAA,KAAE,CACN,UAAU,CAAC,SACX,SAAS,GACT,KAAK,CAAC,MAAM,KAAK,IACjB,gBAAgB,MAAO;AAE9B;AAEO,eAAe,WAAW,OAAe;IAC9C,MAAM,kHAAA,CAAA,KAAE,CACL,UAAU,CAAC,SACX,MAAM,CAAC;QAAE;IAAQ,GACjB,UAAU,CAAC,CAAA,KAAM,GAAG,MAAM,CAAC,WAAW,SAAS,IAC/C,OAAO;AACZ;AAEO,eAAe,gBAAgB,OAAe;IACnD,MAAM,kHAAA,CAAA,KAAE,CACL,WAAW,CAAC,SACZ,GAAG,CAAC;QAAE,aAAa,IAAI;IAAO,GAC9B,KAAK,CAAC,WAAW,KAAK,SACtB,OAAO;AACZ;AAEO,eAAe,wBACpB,OAAe;IAEf,MAAM,SAAS,MAAM,kHAAA,CAAA,KAAE,CACpB,UAAU,CAAC,SACX,MAAM,CAAC;QAAC;KAAsB,EAC9B,KAAK,CAAC,WAAW,KAAK,SACtB,gBAAgB;IAEnB,OAAO,QAAQ,uBAAuB;AACxC;AAEO,eAAe,qBACpB,IAA6B;IAE7B,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,GAAG;IAElC,MAAM,kHAAA,CAAA,KAAE,CACL,WAAW,CAAC,SACZ,GAAG,CAAC;QACH,qBAAqB;QACrB,uBAAuB,IAAI;QAC3B,GAAG,UAAU;QAEb,sBAAsB,WAAW,oBAAoB,GACjD,KAAK,SAAS,CAAC,WAAW,oBAAoB,IAC9C;IACN,GACC,KAAK,CAAC,WAAW,KAAK,QACtB,OAAO;AACZ;AAEO,eAAe,kBACpB,MAAc,EACd,OAAwD;IAExD,MAAM,kHAAA,CAAA,KAAE,CAAC,WAAW,CAAC,SAAS,GAAG,CAAC,SAAS,KAAK,CAAC,MAAM,KAAK,QAAQ,OAAO;AAC7E","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/utils/apiUtils.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth0 } from \"@/lib/auth0\";\nimport { getUserByAuth0Id } from \"@/lib/queries/users\";\n\nexport async function getUserFromSession(\n  req?: NextRequest\n): Promise<string | null> {\n  const session = await auth0.getSession();\n\n  if (!session?.user?.sub) {\n    return null;\n  }\n\n  const user = await getUserByAuth0Id(session.user.sub);\n  return user?.id ?? null;\n}\n\nexport function createErrorResponse(message: string, status: number) {\n  return NextResponse.json({ error: message }, { status });\n}\n\nexport function createSuccessResponse(data?: any) {\n  return NextResponse.json({ success: true, ...data });\n}\n\nexport async function validateJsonBody<T>(\n  req: NextRequest,\n  requiredFields: (keyof T)[]\n): Promise<T | NextResponse> {\n  try {\n    const body = (await req.json()) as T;\n\n    for (const field of requiredFields) {\n      if (!body[field]) {\n        return createErrorResponse(\n          `Missing required field: ${String(field)}`,\n          400\n        );\n      }\n    }\n\n    return body;\n  } catch (error) {\n    return createErrorResponse(\"Invalid JSON body\", 400);\n  }\n}\n"],"names":[],"mappings":"AAAA,oDAAoD,GACpD,qDAAqD;;;;;;AACrD;AACA;AACA;;;;;;;;AAEO,eAAe,mBACpB,GAAiB;IAEjB,MAAM,UAAU,MAAM,qHAAA,CAAA,QAAK,CAAC,UAAU;IAEtC,IAAI,CAAC,SAAS,MAAM,KAAK;QACvB,OAAO;IACT;IAEA,MAAM,OAAO,MAAM,CAAA,GAAA,gIAAA,CAAA,mBAAgB,AAAD,EAAE,QAAQ,IAAI,CAAC,GAAG;IACpD,OAAO,MAAM,MAAM;AACrB;AAEO,SAAS,oBAAoB,OAAe,EAAE,MAAc;IACjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAQ,GAAG;QAAE;IAAO;AACxD;AAEO,SAAS,sBAAsB,IAAU;IAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAM,GAAG,IAAI;IAAC;AACpD;AAEO,eAAe,iBACpB,GAAgB,EAChB,cAA2B;IAE3B,IAAI;QACF,MAAM,OAAQ,MAAM,IAAI,IAAI;QAE5B,KAAK,MAAM,SAAS,eAAgB;YAClC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAChB,OAAO,oBACL,CAAC,wBAAwB,EAAE,OAAO,QAAQ,EAC1C;YAEJ;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO,oBAAoB,qBAAqB;IAClD;AACF","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/queries/pets.ts"],"sourcesContent":["import { db } from '@/lib/db';\nimport { sql } from 'kysely';\n\nexport type PetFilters = {\n  type?: string;\n  gender?: string;\n  size?: string;\n  age?: string;\n};\n\nexport type PetSearchResult = {\n  id: string;\n  name: string;\n  ageGroup: string;\n  breed: string | null;\n  size: string;\n  imageUrl: string | null;\n  isFavorite: boolean;\n};\n\nexport async function searchPets(\n  filters: PetFilters\n): Promise<PetSearchResult[]> {\n  let q = db\n    .selectFrom('pets')\n    .select(({ ref }) => [\n      'pets.id',\n      'pets.name',\n      ref('pets.ageGroup').as('ageGroup'),\n      'pets.breed',\n      'pets.size',\n      sql<string>`pi.url`.as('imageUrl'),\n      sql<boolean>`CASE WHEN f.pet_id IS NOT NULL THEN true ELSE false END`.as(\n        'isFavorite'\n      ),\n    ])\n    .leftJoin('petImages as pi', j =>\n      j.onRef('pi.petId', '=', 'pets.id').on('pi.orderIdx', '=', 0)\n    )\n    .leftJoin('favourites as f', 'f.petId', 'pets.id')\n    .limit(20);\n\n  if (filters.type) q = q.where('pets.type', '=', filters.type);\n  if (filters.gender) q = q.where('pets.gender', '=', filters.gender);\n  if (filters.size) q = q.where('pets.size', '=', filters.size);\n  if (filters.age) q = q.where('pets.ageGroup', '=', filters.age);\n\n  return await q.execute();\n}\n\nexport type PetDetails = {\n  id: string;\n  name: string;\n  ageGroup: string;\n  breed: string | null;\n  size: string;\n  gender: string;\n  description: string | null;\n  ownerId: string;\n};\n\nexport type PetPhoto = { url: string };\nexport type PetOwner = { name: string };\n\nexport async function getPetByIdForOwner(petId: string, ownerId: string) {\n  const pet = await db\n    .selectFrom('pets')\n    .selectAll()\n    .where('id', '=', petId)\n    .where('ownerId', '=', ownerId)\n    .executeTakeFirst();\n\n  if (!pet) return null;\n\n  const images = await db\n    .selectFrom('petImages')\n    .select(['url', 'orderIdx'])\n    .where('petId', '=', petId)\n    .orderBy('orderIdx', 'asc')\n    .execute();\n\n  return { ...pet, images };\n}\n\nexport async function getPetById(id: string): Promise<PetDetails | null> {\n  return (\n    (await db\n      .selectFrom('pets')\n      .where('pets.id', '=', id)\n      .select([\n        'id',\n        'name',\n        'ageGroup',\n        'breed',\n        'size',\n        'gender',\n        'description',\n        'ownerId',\n      ])\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function getPetPhotos(petId: string): Promise<PetPhoto[]> {\n  return db\n    .selectFrom('petImages')\n    .where('petId', '=', petId)\n    .orderBy('orderIdx')\n    .select(['url'])\n    .execute();\n}\n\nexport async function getPetOwner(ownerId: string): Promise<PetOwner | null> {\n  return (\n    (await db\n      .selectFrom('users')\n      .where('id', '=', ownerId)\n      .select(['name'])\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function isPetFavorited(\n  petId: string,\n  userId: string\n): Promise<boolean> {\n  const res = await db\n    .selectFrom('favourites')\n    .select('petId')\n    .where('petId', '=', petId)\n    .where('userId', '=', userId)\n    .executeTakeFirst();\n  return !!res;\n}\n\ntype CreatePetData = {\n  name: string;\n  type: string;\n  breed?: string | null;\n  gender: string;\n  size: string;\n  ageGroup: string;\n  description?: string | null;\n};\n\nexport async function createPet(\n  ownerId: string,\n  petData: CreatePetData\n): Promise<string> {\n  const result = await db\n    .insertInto('pets')\n    .values({ ownerId, ...petData })\n    .returning('id')\n    .executeTakeFirstOrThrow();\n  return result.id;\n}\n\nexport async function getUserPets(userId: string) {\n  const pets = await db\n    .selectFrom('pets')\n    .select([\n      'pets.id',\n      'pets.name',\n      'pets.type',\n      'pets.breed',\n      'pets.gender',\n      'pets.size',\n      'pets.ageGroup',\n      'pets.description',\n      'pets.status',\n      'pets.createdAt',\n      'pets.updatedAt',\n    ])\n    .where('pets.ownerId', '=', userId)\n    .orderBy('pets.createdAt', 'desc')\n    .execute();\n\n  const petsWithImages = await Promise.all(\n    pets.map(async p => ({\n      ...p,\n      images: await db\n        .selectFrom('petImages')\n        .select(['url', 'orderIdx'])\n        .where('petId', '=', p.id)\n        .orderBy('orderIdx', 'asc')\n        .execute(),\n    }))\n  );\n  return petsWithImages;\n}\n\nexport async function getUserPetsSlice(\n  userId: string,\n  offset: number,\n  limit: number,\n  chips: string[]\n) {\n  let q = db.selectFrom('pets').where('ownerId', '=', userId);\n\n  if (chips.includes('cat') || chips.includes('dog'))\n    q = q.where(\n      'type',\n      'in',\n      chips.filter(c => c === 'cat' || c === 'dog')\n    );\n\n  if (chips.includes('female') || chips.includes('male'))\n    q = q.where(\n      'gender',\n      'in',\n      chips.filter(c => c === 'female' || c === 'male')\n    );\n\n  if (['small', 'medium', 'large'].some(c => chips.includes(c)))\n    q = q.where(\n      'size',\n      'in',\n      chips.filter(c => ['small', 'medium', 'large'].includes(c))\n    );\n\n  if (['baby', 'young', 'adult', 'senior'].some(c => chips.includes(c)))\n    q = q.where(\n      'ageGroup',\n      'in',\n      chips.filter(c => ['baby', 'young', 'adult', 'senior'].includes(c))\n    );\n\n  const [{ count }] = await q\n    .select(eb => eb.fn.countAll().as('count'))\n    .execute();\n\n  const pets = await q\n    .offset(offset)\n    .limit(limit)\n    .orderBy('createdAt', 'desc')\n    .selectAll()\n    .execute();\n\n  const petsWithImages = await Promise.all(\n    pets.map(async p => ({\n      ...p,\n      images: await db\n        .selectFrom('petImages')\n        .select(['url', 'orderIdx'])\n        .where('petId', '=', p.id)\n        .orderBy('orderIdx', 'asc')\n        .execute(),\n    }))\n  );\n\n  return { pets: petsWithImages, totalCount: Number(count) };\n}\n\ntype UpdatePetData = Partial<{\n  name: string;\n  type: string;\n  breed: string | null;\n  gender: string;\n  size: string;\n  ageGroup: string;\n  description: string | null;\n  status: string;\n}>;\n\nexport async function updatePet(\n  petId: string,\n  ownerId: string,\n  petData: UpdatePetData\n) {\n  if (!Object.keys(petData).length) return;\n\n  await db\n    .updateTable('pets')\n    .set({ ...petData, updatedAt: new Date() })\n    .where('id', '=', petId)\n    .where('ownerId', '=', ownerId)\n    .execute();\n}\n\nexport async function updatePetWithImages(\n  petId: string,\n  ownerId: string,\n  petData: UpdatePetData,\n  imageUrls: string[]\n) {\n  await db.transaction().execute(async trx => {\n    if (Object.keys(petData).length) {\n      await trx\n        .updateTable('pets')\n        .set({ ...petData, updatedAt: new Date() })\n        .where('id', '=', petId)\n        .where('ownerId', '=', ownerId)\n        .execute();\n    }\n\n    const existing = await trx\n      .selectFrom('petImages')\n      .select(['id', 'url'])\n      .where('petId', '=', petId)\n      .execute();\n\n    const currentUrls = new Set(existing.map(e => e.url));\n    const newUrls = new Set(imageUrls);\n\n    const toDelete = existing.filter(e => !newUrls.has(e.url)).map(e => e.id);\n    if (toDelete.length) {\n      await trx.deleteFrom('petImages').where('id', 'in', toDelete).execute();\n    }\n\n    const toInsert = imageUrls\n      .map((url, idx) =>\n        currentUrls.has(url)\n          ? null\n          : { id: crypto.randomUUID(), petId, url, orderIdx: idx }\n      )\n      .filter(Boolean) as {\n      id: string;\n      petId: string;\n      url: string;\n      orderIdx: number;\n    }[];\n    if (toInsert.length)\n      await trx.insertInto('petImages').values(toInsert).execute();\n\n    await Promise.all(\n      imageUrls.map(async (url, idx) => {\n        const row = existing.find(e => e.url === url);\n        if (row) {\n          await trx\n            .updateTable('petImages')\n            .set({ orderIdx: idx })\n            .where('id', '=', row.id)\n            .execute();\n        }\n      })\n    );\n  });\n}\n\nexport async function deletePet(petId: string, ownerId: string) {\n  await db.deleteFrom('petImages').where('petId', '=', petId).execute();\n  await db\n    .deleteFrom('pets')\n    .where('id', '=', petId)\n    .where('ownerId', '=', ownerId)\n    .execute();\n}\n\nexport async function savePetImageUrls(petId: string, imageUrls: string[]) {\n  await db.deleteFrom('petImages').where('petId', '=', petId).execute();\n\n  if (imageUrls.length) {\n    await db\n      .insertInto('petImages')\n      .values(imageUrls.map((url, idx) => ({ petId, url, orderIdx: idx })))\n      .execute();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/app/api/pets/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport {\n  createErrorResponse,\n  createSuccessResponse,\n  getUserFromSession,\n} from '@/lib/utils/apiUtils';\nimport { createPet, getUserPets, savePetImageUrls } from '@/lib/queries/pets';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const userId = await getUserFromSession();\n    if (!userId) {\n      return createErrorResponse('Unauthorized', 401);\n    }\n\n    const url = new URL(req.url);\n    const search = url.searchParams;\n\n    const page = Math.max(1, Number(search.get('page') ?? '1'));\n    const limit = Math.max(1, Number(search.get('limit') ?? '9'));\n    const chips = (search.get('filters') ?? '')\n      .split(',')\n      .filter(Boolean)\n      .map(c => c.toLowerCase());\n\n    const allPets = await getUserPets(userId);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const matchesChipSet = (pet: any) => {\n      if (chips.length === 0) return true;\n\n      return chips.every(f => {\n        switch (f) {\n          case 'cat':\n          case 'dog':\n            return pet.type?.toLowerCase() === f;\n          case 'female':\n          case 'male':\n            return pet.gender?.toLowerCase() === f;\n          case 'small':\n          case 'medium':\n          case 'large':\n            return pet.size?.toLowerCase() === f;\n          case 'baby':\n          case 'young':\n          case 'adult':\n          case 'senior':\n            return pet.ageGroup?.toLowerCase() === f;\n          default:\n            return true;\n        }\n      });\n    };\n\n    const filtered = allPets.filter(matchesChipSet);\n    const totalCount = filtered.length;\n\n    const start = (page - 1) * limit;\n    const pets = filtered.slice(start, start + limit);\n\n    return createSuccessResponse({ pets, totalCount });\n  } catch (error) {\n    console.error('Error fetching pets:', error);\n    return createErrorResponse('Internal server error', 500);\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const userId = await getUserFromSession();\n    if (!userId) {\n      return createErrorResponse('Unauthorized', 401);\n    }\n\n    const body = await req.json();\n\n    const petData = {\n      name: body.name,\n      type: body.type,\n      breed: body.breed || null,\n      gender: body.gender,\n      size: body.size,\n      ageGroup: body.ageGroup,\n      description: body.description || null,\n    };\n\n    if (\n      !petData.name ||\n      !petData.type ||\n      !petData.gender ||\n      !petData.size ||\n      !petData.ageGroup\n    ) {\n      return createErrorResponse('Missing required fields', 400);\n    }\n\n    const petId = await createPet(userId, petData);\n\n    const imageUrls = body.imageUrls || [];\n    if (imageUrls.length > 0) {\n      await savePetImageUrls(petId, imageUrls);\n    }\n\n    return createSuccessResponse({ petId });\n  } catch (error) {\n    console.error('Error creating pet:', error);\n    return createErrorResponse('Internal server error', 500);\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}