{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///home/mgrumadas/projects/match4paws/src/lib/auth0.ts"],"sourcesContent":["import { Auth0Client } from '@auth0/nextjs-auth0/server';\n\nexport const auth0 = new Auth0Client({\n  domain: process.env.AUTH0_DOMAIN,\n  clientId: process.env.AUTH0_CLIENT_ID,\n  clientSecret: process.env.AUTH0_CLIENT_SECRET,\n  secret: process.env.AUTH0_SECRET,\n  appBaseUrl: process.env.APP_BASE_URL,\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEO,MAAM,QAAQ,IAAI,wKAAA,CAAA,cAAW,CAAC;IACnC,QAAQ,QAAQ,GAAG,CAAC,YAAY;IAChC,UAAU,QAAQ,GAAG,CAAC,eAAe;IACrC,cAAc,QAAQ,GAAG,CAAC,mBAAmB;IAC7C,QAAQ,QAAQ,GAAG,CAAC,YAAY;IAChC,YAAY,QAAQ,GAAG,CAAC,YAAY;AACtC","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///home/mgrumadas/projects/match4paws/src/lib/db.ts"],"sourcesContent":["import \"dotenv/config\";\nimport { Kysely, PostgresDialect, CamelCasePlugin } from \"kysely\";\nimport { Pool } from \"pg\";\nimport { DB } from \"@/database/types\";\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nconst dialect = new PostgresDialect({ pool });\n\nexport const db = new Kysely<DB>({\n  dialect,\n  plugins: [new CamelCasePlugin()],\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;AAGA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAEA,MAAM,UAAU,IAAI,qLAAA,CAAA,kBAAe,CAAC;IAAE;AAAK;AAEpC,MAAM,KAAK,IAAI,iJAAA,CAAA,SAAM,CAAK;IAC/B;IACA,SAAS;QAAC,IAAI,6LAAA,CAAA,kBAAe;KAAG;AAClC","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/mgrumadas/projects/match4paws/src/lib/queries/users.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\nimport { UpdateOnboardingRequest } from \"@/lib/types/onboarding\";\n\nexport type User = {\n  id: string;\n  auth0Id: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n  gender?: string;\n  userType?: string;\n  onboardingCompleted: boolean;\n  createdAt: Date;\n  lastLoginAt?: Date;\n};\n\nexport async function getUserByAuth0Id(\n  auth0Id: string\n): Promise<{ id: string } | null> {\n  return (\n    (await db\n      .selectFrom(\"users\")\n      .select([\"id\"])\n      .where(\"auth0Id\", \"=\", auth0Id)\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  return (\n    (await db\n      .selectFrom(\"users\")\n      .selectAll()\n      .where(\"id\", \"=\", id)\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function createUser(auth0Id: string): Promise<void> {\n  await db\n    .insertInto(\"users\")\n    .values({ auth0Id })\n    .onConflict((oc) => oc.column(\"auth0Id\").doNothing())\n    .execute();\n}\n\nexport async function updateLastLogin(auth0Id: string): Promise<void> {\n  await db\n    .updateTable(\"users\")\n    .set({ lastLoginAt: new Date() })\n    .where(\"auth0Id\", \"=\", auth0Id)\n    .execute();\n}\n\nexport async function getUserOnboardingStatus(\n  auth0Id: string\n): Promise<boolean> {\n  const result = await db\n    .selectFrom(\"users\")\n    .select([\"onboardingCompleted\"])\n    .where(\"auth0Id\", \"=\", auth0Id)\n    .executeTakeFirst();\n\n  return result?.onboardingCompleted ?? false;\n}\n\nexport async function updateUserOnboarding(\n  data: UpdateOnboardingRequest\n): Promise<void> {\n  const { userId, ...updateData } = data;\n\n  await db\n    .updateTable(\"users\")\n    .set({\n      onboardingCompleted: true,\n      onboardingCompletedAt: new Date(),\n      ...updateData,\n\n      preferredAnimalTypes: updateData.preferredAnimalTypes\n        ? JSON.stringify(updateData.preferredAnimalTypes)\n        : undefined,\n    })\n    .where(\"auth0Id\", \"=\", userId)\n    .execute();\n}\n\nexport async function updateUserProfile(\n  userId: string,\n  updates: Partial<Pick<User, \"name\" | \"email\" | \"phone\" | \"gender\">>\n): Promise<void> {\n  await db.updateTable(\"users\").set(updates).where(\"id\", \"=\", userId).execute();\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;AAgBO,eAAe,iBACpB,OAAe;IAEf,OACE,AAAC,MAAM,kHAAA,CAAA,KAAE,CACN,UAAU,CAAC,SACX,MAAM,CAAC;QAAC;KAAK,EACb,KAAK,CAAC,WAAW,KAAK,SACtB,gBAAgB,MAAO;AAE9B;AAEO,eAAe,YAAY,EAAU;IAC1C,OACE,AAAC,MAAM,kHAAA,CAAA,KAAE,CACN,UAAU,CAAC,SACX,SAAS,GACT,KAAK,CAAC,MAAM,KAAK,IACjB,gBAAgB,MAAO;AAE9B;AAEO,eAAe,WAAW,OAAe;IAC9C,MAAM,kHAAA,CAAA,KAAE,CACL,UAAU,CAAC,SACX,MAAM,CAAC;QAAE;IAAQ,GACjB,UAAU,CAAC,CAAC,KAAO,GAAG,MAAM,CAAC,WAAW,SAAS,IACjD,OAAO;AACZ;AAEO,eAAe,gBAAgB,OAAe;IACnD,MAAM,kHAAA,CAAA,KAAE,CACL,WAAW,CAAC,SACZ,GAAG,CAAC;QAAE,aAAa,IAAI;IAAO,GAC9B,KAAK,CAAC,WAAW,KAAK,SACtB,OAAO;AACZ;AAEO,eAAe,wBACpB,OAAe;IAEf,MAAM,SAAS,MAAM,kHAAA,CAAA,KAAE,CACpB,UAAU,CAAC,SACX,MAAM,CAAC;QAAC;KAAsB,EAC9B,KAAK,CAAC,WAAW,KAAK,SACtB,gBAAgB;IAEnB,OAAO,QAAQ,uBAAuB;AACxC;AAEO,eAAe,qBACpB,IAA6B;IAE7B,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,GAAG;IAElC,MAAM,kHAAA,CAAA,KAAE,CACL,WAAW,CAAC,SACZ,GAAG,CAAC;QACH,qBAAqB;QACrB,uBAAuB,IAAI;QAC3B,GAAG,UAAU;QAEb,sBAAsB,WAAW,oBAAoB,GACjD,KAAK,SAAS,CAAC,WAAW,oBAAoB,IAC9C;IACN,GACC,KAAK,CAAC,WAAW,KAAK,QACtB,OAAO;AACZ;AAEO,eAAe,kBACpB,MAAc,EACd,OAAmE;IAEnE,MAAM,kHAAA,CAAA,KAAE,CAAC,WAAW,CAAC,SAAS,GAAG,CAAC,SAAS,KAAK,CAAC,MAAM,KAAK,QAAQ,OAAO;AAC7E","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///home/mgrumadas/projects/match4paws/src/lib/utils/apiUtils.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { auth0 } from \"@/lib/auth0\";\nimport { getUserByAuth0Id } from \"@/lib/queries/users\";\n\nexport async function getUserFromSession(\n  req?: NextRequest\n): Promise<string | null> {\n  const session = await auth0.getSession();\n\n  if (!session?.user?.sub) {\n    return null;\n  }\n\n  const user = await getUserByAuth0Id(session.user.sub);\n  return user?.id ?? null;\n}\n\nexport function createErrorResponse(message: string, status: number) {\n  return NextResponse.json({ error: message }, { status });\n}\n\nexport function createSuccessResponse(data?: any) {\n  return NextResponse.json({ success: true, ...data });\n}\n\nexport async function validateJsonBody<T>(\n  req: NextRequest,\n  requiredFields: (keyof T)[]\n): Promise<T | NextResponse> {\n  try {\n    const body = (await req.json()) as T;\n\n    for (const field of requiredFields) {\n      if (!body[field]) {\n        return createErrorResponse(\n          `Missing required field: ${String(field)}`,\n          400\n        );\n      }\n    }\n\n    return body;\n  } catch (error) {\n    return createErrorResponse(\"Invalid JSON body\", 400);\n  }\n}\n"],"names":[],"mappings":"AAAA,oDAAoD,GACpD,qDAAqD;;;;;;AACrD;AACA;AACA;;;;;;;;AAEO,eAAe,mBACpB,GAAiB;IAEjB,MAAM,UAAU,MAAM,qHAAA,CAAA,QAAK,CAAC,UAAU;IAEtC,IAAI,CAAC,SAAS,MAAM,KAAK;QACvB,OAAO;IACT;IAEA,MAAM,OAAO,MAAM,CAAA,GAAA,gIAAA,CAAA,mBAAgB,AAAD,EAAE,QAAQ,IAAI,CAAC,GAAG;IACpD,OAAO,MAAM,MAAM;AACrB;AAEO,SAAS,oBAAoB,OAAe,EAAE,MAAc;IACjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAQ,GAAG;QAAE;IAAO;AACxD;AAEO,SAAS,sBAAsB,IAAU;IAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAM,GAAG,IAAI;IAAC;AACpD;AAEO,eAAe,iBACpB,GAAgB,EAChB,cAA2B;IAE3B,IAAI;QACF,MAAM,OAAQ,MAAM,IAAI,IAAI;QAE5B,KAAK,MAAM,SAAS,eAAgB;YAClC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAChB,OAAO,oBACL,CAAC,wBAAwB,EAAE,OAAO,QAAQ,EAC1C;YAEJ;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO,oBAAoB,qBAAqB;IAClD;AACF","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///home/mgrumadas/projects/match4paws/src/lib/queries/pets.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\nimport { sql } from \"kysely\";\n\nexport type PetFilters = {\n  type?: string;\n  gender?: string;\n  size?: string;\n  age?: string;\n};\n\nexport type PetSearchResult = {\n  id: string;\n  name: string;\n  ageGroup: string;\n  breed: string | null;\n  size: string;\n  imageUrl: string | null;\n  isFavorite: boolean;\n};\n\nexport async function searchPets(\n  filters: PetFilters\n): Promise<PetSearchResult[]> {\n  let q = db\n    .selectFrom(\"pets\")\n    .select(({ ref }) => [\n      \"pets.id\",\n      \"pets.name\",\n      ref(\"pets.ageGroup\").as(\"ageGroup\"),\n      \"pets.breed\",\n      \"pets.size\",\n      sql<string>`pi.url`.as(\"imageUrl\"),\n      sql<boolean>`CASE WHEN f.pet_id IS NOT NULL THEN true ELSE false END`.as(\n        \"isFavorite\"\n      ),\n    ])\n    .leftJoin(\"petImages as pi\", (j) =>\n      j.onRef(\"pi.petId\", \"=\", \"pets.id\").on(\"pi.orderIdx\", \"=\", 0)\n    )\n    .leftJoin(\"favourites as f\", \"f.petId\", \"pets.id\")\n    .limit(20);\n\n  if (filters.type) q = q.where(\"pets.type\", \"=\", filters.type);\n  if (filters.gender) q = q.where(\"pets.gender\", \"=\", filters.gender);\n  if (filters.size) q = q.where(\"pets.size\", \"=\", filters.size);\n  if (filters.age) q = q.where(\"pets.ageGroup\", \"=\", filters.age);\n\n  return await q.execute();\n}\n\nexport type PetDetails = {\n  id: string;\n  name: string;\n  ageGroup: string;\n  breed: string | null;\n  size: string;\n  gender: string;\n  description: string | null;\n  ownerId: string;\n};\n\nexport type PetPhoto = {\n  url: string;\n};\n\nexport type PetOwner = {\n  name: string;\n};\n\nexport async function getPetById(id: string): Promise<PetDetails | null> {\n  return (\n    (await db\n      .selectFrom(\"pets\")\n      .where(\"pets.id\", \"=\", id)\n      .select([\n        \"id\",\n        \"name\",\n        \"ageGroup\",\n        \"breed\",\n        \"size\",\n        \"gender\",\n        \"description\",\n        \"ownerId\",\n      ])\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function getPetPhotos(petId: string): Promise<PetPhoto[]> {\n  return await db\n    .selectFrom(\"petImages\")\n    .where(\"petId\", \"=\", petId)\n    .orderBy(\"orderIdx\")\n    .select([\"url\"])\n    .execute();\n}\n\nexport async function getPetOwner(ownerId: string): Promise<PetOwner | null> {\n  return (\n    (await db\n      .selectFrom(\"users\")\n      .where(\"id\", \"=\", ownerId)\n      .select([\"name\"])\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function isPetFavorited(\n  petId: string,\n  userId: string\n): Promise<boolean> {\n  const result = await db\n    .selectFrom(\"favourites\")\n    .select(\"petId\")\n    .where(\"petId\", \"=\", petId)\n    .where(\"userId\", \"=\", userId)\n    .executeTakeFirst();\n\n  return !!result;\n}\n\ntype CreatePetData = {\n  name: string;\n  type: string;\n  breed?: string | null;\n  gender: string;\n  size: string;\n  ageGroup: string;\n  description?: string | null;\n};\n\ntype UpdatePetData = CreatePetData & {\n  status?: string;\n};\n\nexport async function createPet(\n  ownerId: string,\n  petData: CreatePetData\n): Promise<string> {\n  const result = await db\n    .insertInto(\"pets\")\n    .values({\n      ownerId,\n      ...petData,\n    })\n    .returning(\"id\")\n    .executeTakeFirstOrThrow();\n\n  return result.id;\n}\n\nexport async function getUserPets(userId: string) {\n  const pets = await db\n    .selectFrom(\"pets\")\n    .select([\n      \"pets.id\",\n      \"pets.name\",\n      \"pets.type\",\n      \"pets.breed\",\n      \"pets.gender\",\n      \"pets.size\",\n      \"pets.ageGroup\",\n      \"pets.description\",\n      \"pets.status\",\n      \"pets.createdAt\",\n      \"pets.updatedAt\",\n    ])\n    .where(\"pets.ownerId\", \"=\", userId)\n    .orderBy(\"pets.createdAt\", \"desc\")\n    .execute();\n\n  const petsWithImages = await Promise.all(\n    pets.map(async (pet) => {\n      const images = await db\n        .selectFrom(\"petImages\")\n        .select([\"url\", \"orderIdx\"])\n        .where(\"petId\", \"=\", pet.id)\n        .orderBy(\"orderIdx\", \"asc\")\n        .execute();\n\n      return {\n        ...pet,\n        images,\n      };\n    })\n  );\n\n  return petsWithImages;\n}\n\nexport async function getPetByIdForOwner(petId: string, userId: string) {\n  const pet = await db\n    .selectFrom(\"pets\")\n    .selectAll()\n    .where(\"pets.id\", \"=\", petId)\n    .where(\"pets.ownerId\", \"=\", userId)\n    .executeTakeFirst();\n\n  if (!pet) {\n    return null;\n  }\n\n  const images = await db\n    .selectFrom(\"petImages\")\n    .select([\"url\", \"orderIdx\"])\n    .where(\"petId\", \"=\", petId)\n    .orderBy(\"orderIdx\", \"asc\")\n    .execute();\n\n  return {\n    ...pet,\n    images,\n  };\n}\n\nexport async function updatePet(\n  petId: string,\n  userId: string,\n  petData: UpdatePetData\n) {\n  await db\n    .updateTable(\"pets\")\n    .set({\n      ...petData,\n      updatedAt: new Date(),\n    })\n    .where(\"id\", \"=\", petId)\n    .where(\"ownerId\", \"=\", userId)\n    .execute();\n}\n\nexport async function deletePet(petId: string, userId: string) {\n  await db.deleteFrom(\"petImages\").where(\"petId\", \"=\", petId).execute();\n\n  await db\n    .deleteFrom(\"pets\")\n    .where(\"id\", \"=\", petId)\n    .where(\"ownerId\", \"=\", userId)\n    .execute();\n}\n\nexport async function savePetImageUrls(petId: string, imageUrls: string[]) {\n  await db.deleteFrom(\"petImages\").where(\"petId\", \"=\", petId).execute();\n\n  if (imageUrls.length > 0) {\n    const imageRecords = imageUrls.map((url, index) => ({\n      petId: petId,\n      url: url,\n      orderIdx: index,\n    }));\n\n    await db.insertInto(\"petImages\").values(imageRecords).execute();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///home/mgrumadas/projects/match4paws/src/app/api/pets/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport {\n  createErrorResponse,\n  createSuccessResponse,\n  getUserFromSession,\n} from \"@/lib/utils/apiUtils\";\nimport { createPet, getUserPets, savePetImageUrls } from \"@/lib/queries/pets\";\n\nexport async function GET() {\n  try {\n    const userId = await getUserFromSession();\n    if (!userId) {\n      return createErrorResponse(\"Unauthorized\", 401);\n    }\n\n    const pets = await getUserPets(userId);\n    return createSuccessResponse({ pets });\n  } catch (error) {\n    console.error(\"Error fetching pets:\", error);\n    return createErrorResponse(\"Internal server error\", 500);\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const userId = await getUserFromSession();\n    if (!userId) {\n      return createErrorResponse(\"Unauthorized\", 401);\n    }\n\n    const body = await req.json();\n\n    // Extract pet data\n    const petData = {\n      name: body.name,\n      type: body.type,\n      breed: body.breed || null,\n      gender: body.gender,\n      size: body.size,\n      ageGroup: body.ageGroup,\n      description: body.description || null,\n    };\n\n    // Validate required fields\n    if (\n      !petData.name ||\n      !petData.type ||\n      !petData.gender ||\n      !petData.size ||\n      !petData.ageGroup\n    ) {\n      return createErrorResponse(\"Missing required fields\", 400);\n    }\n\n    // Create the pet\n    const petId = await createPet(userId, petData);\n\n    // Handle image URLs\n    const imageUrls = body.imageUrls || [];\n    if (imageUrls.length > 0) {\n      await savePetImageUrls(petId, imageUrls);\n    }\n\n    return createSuccessResponse({ petId });\n  } catch (error) {\n    console.error(\"Error creating pet:\", error);\n    return createErrorResponse(\"Internal server error\", 500);\n  }\n}\n"],"names":[],"mappings":";;;;AACA;AAKA;;;;;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,iIAAA,CAAA,qBAAkB,AAAD;QACtC,IAAI,CAAC,QAAQ;YACX,OAAO,CAAA,GAAA,iIAAA,CAAA,sBAAmB,AAAD,EAAE,gBAAgB;QAC7C;QAEA,MAAM,OAAO,MAAM,CAAA,GAAA,+HAAA,CAAA,cAAW,AAAD,EAAE;QAC/B,OAAO,CAAA,GAAA,iIAAA,CAAA,wBAAqB,AAAD,EAAE;YAAE;QAAK;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,CAAA,GAAA,iIAAA,CAAA,sBAAmB,AAAD,EAAE,yBAAyB;IACtD;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,iIAAA,CAAA,qBAAkB,AAAD;QACtC,IAAI,CAAC,QAAQ;YACX,OAAO,CAAA,GAAA,iIAAA,CAAA,sBAAmB,AAAD,EAAE,gBAAgB;QAC7C;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,mBAAmB;QACnB,MAAM,UAAU;YACd,MAAM,KAAK,IAAI;YACf,MAAM,KAAK,IAAI;YACf,OAAO,KAAK,KAAK,IAAI;YACrB,QAAQ,KAAK,MAAM;YACnB,MAAM,KAAK,IAAI;YACf,UAAU,KAAK,QAAQ;YACvB,aAAa,KAAK,WAAW,IAAI;QACnC;QAEA,2BAA2B;QAC3B,IACE,CAAC,QAAQ,IAAI,IACb,CAAC,QAAQ,IAAI,IACb,CAAC,QAAQ,MAAM,IACf,CAAC,QAAQ,IAAI,IACb,CAAC,QAAQ,QAAQ,EACjB;YACA,OAAO,CAAA,GAAA,iIAAA,CAAA,sBAAmB,AAAD,EAAE,2BAA2B;QACxD;QAEA,iBAAiB;QACjB,MAAM,QAAQ,MAAM,CAAA,GAAA,+HAAA,CAAA,YAAS,AAAD,EAAE,QAAQ;QAEtC,oBAAoB;QACpB,MAAM,YAAY,KAAK,SAAS,IAAI,EAAE;QACtC,IAAI,UAAU,MAAM,GAAG,GAAG;YACxB,MAAM,CAAA,GAAA,+HAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO;QAChC;QAEA,OAAO,CAAA,GAAA,iIAAA,CAAA,wBAAqB,AAAD,EAAE;YAAE;QAAM;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,CAAA,GAAA,iIAAA,CAAA,sBAAmB,AAAD,EAAE,yBAAyB;IACtD;AACF","debugId":null}}]
}