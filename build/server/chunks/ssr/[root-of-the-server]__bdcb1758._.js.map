{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/components/homepage/Homepage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/homepage/Homepage.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/homepage/Homepage.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/components/homepage/Homepage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/homepage/Homepage.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/homepage/Homepage.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/db.ts"],"sourcesContent":["import \"dotenv/config\";\nimport { Kysely, PostgresDialect, CamelCasePlugin } from \"kysely\";\nimport { Pool } from \"pg\";\nimport { DB } from \"@/database/types\";\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nconst dialect = new PostgresDialect({ pool });\n\nexport const db = new Kysely<DB>({\n  dialect,\n  plugins: [new CamelCasePlugin()],\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;AAGA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAEA,MAAM,UAAU,IAAI,mLAAA,CAAA,kBAAe,CAAC;IAAE;AAAK;AAEpC,MAAM,KAAK,IAAI,+IAAA,CAAA,SAAM,CAAK;IAC/B;IACA,SAAS;QAAC,IAAI,2LAAA,CAAA,kBAAe;KAAG;AAClC","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/queries/users.ts"],"sourcesContent":["import { db } from '@/lib/db';\nimport { UpdateOnboardingRequest } from '@/lib/types/onboarding';\n\nexport type User = {\n  id: string;\n  auth0Id: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n  userType?: string;\n  onboardingCompleted: boolean;\n  createdAt: Date;\n  lastLoginAt?: Date;\n  address: string;\n};\n\nexport async function getUserByAuth0Id(\n  auth0Id: string\n): Promise<{ id: string } | null> {\n  return (\n    (await db\n      .selectFrom('users')\n      .select(['id'])\n      .where('auth0Id', '=', auth0Id)\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function getUserById(id: string): Promise<User | null> {\n  return (\n    (await db\n      .selectFrom('users')\n      .selectAll()\n      .where('id', '=', id)\n      .executeTakeFirst()) || null\n  );\n}\n\nexport async function createUser(auth0Id: string): Promise<void> {\n  await db\n    .insertInto('users')\n    .values({ auth0Id })\n    .onConflict(oc => oc.column('auth0Id').doNothing())\n    .execute();\n}\n\nexport async function updateLastLogin(auth0Id: string): Promise<void> {\n  await db\n    .updateTable('users')\n    .set({ lastLoginAt: new Date() })\n    .where('auth0Id', '=', auth0Id)\n    .execute();\n}\n\nexport async function getUserOnboardingStatus(\n  auth0Id: string\n): Promise<boolean> {\n  const result = await db\n    .selectFrom('users')\n    .select(['onboardingCompleted'])\n    .where('auth0Id', '=', auth0Id)\n    .executeTakeFirst();\n\n  return result?.onboardingCompleted ?? false;\n}\n\nexport async function updateUserOnboarding(\n  data: UpdateOnboardingRequest\n): Promise<void> {\n  const { userId, ...updateData } = data;\n\n  await db\n    .updateTable('users')\n    .set({\n      onboardingCompleted: true,\n      onboardingCompletedAt: new Date(),\n      ...updateData,\n    })\n    .where('auth0Id', '=', userId)\n    .execute();\n}\n\nexport async function updateUserProfile(\n  userId: string,\n  updates: Partial<Pick<User, 'name' | 'email' | 'phone' | 'address'>>\n) {\n  if (!Object.keys(updates).length) return;\n  await db\n    .updateTable('users')\n    .set({ ...updates })\n    .where('id', '=', userId)\n    .execute();\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;AAgBO,eAAe,iBACpB,OAAe;IAEf,OACE,AAAC,MAAM,gHAAA,CAAA,KAAE,CACN,UAAU,CAAC,SACX,MAAM,CAAC;QAAC;KAAK,EACb,KAAK,CAAC,WAAW,KAAK,SACtB,gBAAgB,MAAO;AAE9B;AAEO,eAAe,YAAY,EAAU;IAC1C,OACE,AAAC,MAAM,gHAAA,CAAA,KAAE,CACN,UAAU,CAAC,SACX,SAAS,GACT,KAAK,CAAC,MAAM,KAAK,IACjB,gBAAgB,MAAO;AAE9B;AAEO,eAAe,WAAW,OAAe;IAC9C,MAAM,gHAAA,CAAA,KAAE,CACL,UAAU,CAAC,SACX,MAAM,CAAC;QAAE;IAAQ,GACjB,UAAU,CAAC,CAAA,KAAM,GAAG,MAAM,CAAC,WAAW,SAAS,IAC/C,OAAO;AACZ;AAEO,eAAe,gBAAgB,OAAe;IACnD,MAAM,gHAAA,CAAA,KAAE,CACL,WAAW,CAAC,SACZ,GAAG,CAAC;QAAE,aAAa,IAAI;IAAO,GAC9B,KAAK,CAAC,WAAW,KAAK,SACtB,OAAO;AACZ;AAEO,eAAe,wBACpB,OAAe;IAEf,MAAM,SAAS,MAAM,gHAAA,CAAA,KAAE,CACpB,UAAU,CAAC,SACX,MAAM,CAAC;QAAC;KAAsB,EAC9B,KAAK,CAAC,WAAW,KAAK,SACtB,gBAAgB;IAEnB,OAAO,QAAQ,uBAAuB;AACxC;AAEO,eAAe,qBACpB,IAA6B;IAE7B,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,GAAG;IAElC,MAAM,gHAAA,CAAA,KAAE,CACL,WAAW,CAAC,SACZ,GAAG,CAAC;QACH,qBAAqB;QACrB,uBAAuB,IAAI;QAC3B,GAAG,UAAU;IACf,GACC,KAAK,CAAC,WAAW,KAAK,QACtB,OAAO;AACZ;AAEO,eAAe,kBACpB,MAAc,EACd,OAAoE;IAEpE,IAAI,CAAC,OAAO,IAAI,CAAC,SAAS,MAAM,EAAE;IAClC,MAAM,gHAAA,CAAA,KAAE,CACL,WAAW,CAAC,SACZ,GAAG,CAAC;QAAE,GAAG,OAAO;IAAC,GACjB,KAAK,CAAC,MAAM,KAAK,QACjB,OAAO;AACZ","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/lib/utils/authUtils.ts"],"sourcesContent":["import { auth0 } from \"@/lib/auth0\";\nimport {\n  createUser,\n  updateLastLogin,\n  getUserOnboardingStatus,\n} from \"@/lib/queries/users\";\n\nexport async function getAuthenticatedUser() {\n  const session = await auth0.getSession();\n  return session?.user || null;\n}\n\nexport async function ensureUserExists(auth0Id: string) {\n  await createUser(auth0Id);\n}\n\nexport async function handleUserSession(auth0Id: string) {\n  await Promise.all([ensureUserExists(auth0Id), updateLastLogin(auth0Id)]);\n\n  return await getUserOnboardingStatus(auth0Id);\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;;;;;AAMO,eAAe;IACpB,MAAM,UAAU,MAAM,mHAAA,CAAA,QAAK,CAAC,UAAU;IACtC,OAAO,SAAS,QAAQ;AAC1B;AAEO,eAAe,iBAAiB,OAAe;IACpD,MAAM,CAAA,GAAA,8HAAA,CAAA,aAAU,AAAD,EAAE;AACnB;AAEO,eAAe,kBAAkB,OAAe;IACrD,MAAM,QAAQ,GAAG,CAAC;QAAC,iBAAiB;QAAU,CAAA,GAAA,8HAAA,CAAA,kBAAe,AAAD,EAAE;KAAS;IAEvE,OAAO,MAAM,CAAA,GAAA,8HAAA,CAAA,0BAAuB,AAAD,EAAE;AACvC","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///home/marty/turing/4-module/4-sprint/match4paws/src/app/%28dashboard%29/%5B%5B...slug%5D%5D/page.tsx"],"sourcesContent":["import { redirect } from \"next/navigation\";\nimport Box from \"@mui/material/Box\";\nimport Homepage from \"@/components/homepage/Homepage\";\nimport { getAuthenticatedUser, handleUserSession } from \"@/lib/utils/authUtils\";\n\nexport function generateStaticParams() {\n  return [{ slug: [\"\"] }];\n}\n\nexport default async function Page() {\n  const user = await getAuthenticatedUser();\n\n  if (user) {\n    const onboardingCompleted = await handleUserSession(user.sub);\n\n    if (!onboardingCompleted) {\n      redirect(\"/onboarding\");\n    }\n  }\n\n  return (\n    <Box sx={{ pb: 8 }}>\n      <Homepage />\n    </Box>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;AAEO,SAAS;IACd,OAAO;QAAC;YAAE,MAAM;gBAAC;aAAG;QAAC;KAAE;AACzB;AAEe,eAAe;IAC5B,MAAM,OAAO,MAAM,CAAA,GAAA,gIAAA,CAAA,uBAAoB,AAAD;IAEtC,IAAI,MAAM;QACR,MAAM,sBAAsB,MAAM,CAAA,GAAA,gIAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,GAAG;QAE5D,IAAI,CAAC,qBAAqB;YACxB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;QACX;IACF;IAEA,qBACE,8OAAC,sJAAA,CAAA,UAAG;QAAC,IAAI;YAAE,IAAI;QAAE;kBACf,cAAA,8OAAC,0IAAA,CAAA,UAAQ;;;;;;;;;;AAGf","debugId":null}}]
}