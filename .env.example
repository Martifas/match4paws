# Copy this file to .env and fill in your actual values

# ===========================================
# DATABASE CONFIGURATION
# ===========================================
# PostgreSQL connection string
# Format: postgres://username:password@host:port/database
DATABASE_URL=postgres://your_username:your_password@localhost:5432/match4paws

# ===========================================
# TEST USER CREDENTIALS
# ===========================================
# Create these users by:
# 1. Running the app locally (npm run dev)
# 2. Going to http://localhost:3000
# 3. Clicking "Login" and creating accounts with these emails
# 4. One account should create/manage pets (owner), one should browse/adopt (adopter)

# Test user with owner privileges (can create and manage pet listings)
TEST_OWNER_EMAIL=your_owner_email@example.com

# Test user with adopter privileges (can browse pets and send messages)
TEST_ADOPTER_EMAIL=your_adopter_email@example.com

# Shared password for both test accounts (or use separate passwords)
TEST_PASSWORD=your_secure_test_password

# ===========================================
# AUTH0 CONFIGURATION
# ===========================================
# Get these values from your Auth0 dashboard at https://manage.auth0.com/

# Random 32-character secret for session encryption
# Generate with: openssl rand -hex 32
AUTH0_SECRET=your_32_character_random_secret_here

# Your application's base URL
APP_BASE_URL=http://localhost:3000

# Your Auth0 domain (found in Auth0 dashboard)
AUTH0_DOMAIN=your-auth0-domain.auth0.com

# Regular Auth0 application credentials (for user authentication)
AUTH0_CLIENT_ID=your_auth0_client_id
AUTH0_CLIENT_SECRET=your_auth0_client_secret

# Machine-to-Machine Auth0 application credentials (for API access)
# Create a separate M2M application in Auth0 for backend API calls
AUTH0_M2M_CLIENT_ID=your_m2m_client_id
AUTH0_M2M_CLIENT_SECRET=your_m2m_client_secret

# ===========================================
# SETUP INSTRUCTIONS
# ===========================================
# 1. Copy this file: cp .env.example .env
# 2. Set up PostgreSQL database and update DATABASE_URL
# 3. Create Auth0 account and application, fill in AUTH0_* values
# 4. Generate AUTH0_SECRET: openssl rand -hex 32
# 5. Start the app: npm run dev
# 6. Create test user accounts via the UI and update TEST_* values
# 7. Run database migrations: npm run migrate:latest